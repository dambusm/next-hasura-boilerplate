schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

# expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

# columns and relationships of "login_tokens"
type login_tokens {
  created_at: timestamptz!
  hash: String!
  id: String!
  used: Boolean!
  user: String!
}

# aggregated selection of "login_tokens"
type login_tokens_aggregate {
  aggregate: login_tokens_aggregate_fields
  nodes: [login_tokens!]!
}

# aggregate fields of "login_tokens"
type login_tokens_aggregate_fields {
  count(columns: [login_tokens_select_column!], distinct: Boolean): Int
  max: login_tokens_max_fields
  min: login_tokens_min_fields
}

# order by aggregate values of table "login_tokens"
input login_tokens_aggregate_order_by {
  count: order_by
  max: login_tokens_max_order_by
  min: login_tokens_min_order_by
}

# input type for inserting array relation for remote table "login_tokens"
input login_tokens_arr_rel_insert_input {
  data: [login_tokens_insert_input!]!
  on_conflict: login_tokens_on_conflict
}

# Boolean expression to filter rows from the table "login_tokens". All fields are combined with a logical 'AND'.
input login_tokens_bool_exp {
  _and: [login_tokens_bool_exp]
  _not: login_tokens_bool_exp
  _or: [login_tokens_bool_exp]
  created_at: timestamptz_comparison_exp
  hash: String_comparison_exp
  id: String_comparison_exp
  used: Boolean_comparison_exp
  user: String_comparison_exp
}

# unique or primary key constraints on table "login_tokens"
enum login_tokens_constraint {
  # unique or primary key constraint
  login_tokens_pkey
}

# input type for inserting data into table "login_tokens"
input login_tokens_insert_input {
  created_at: timestamptz
  hash: String
  id: String
  used: Boolean
  user: String
}

# aggregate max on columns
type login_tokens_max_fields {
  created_at: timestamptz
  hash: String
  id: String
  user: String
}

# order by max() on columns of table "login_tokens"
input login_tokens_max_order_by {
  created_at: order_by
  hash: order_by
  id: order_by
  user: order_by
}

# aggregate min on columns
type login_tokens_min_fields {
  created_at: timestamptz
  hash: String
  id: String
  user: String
}

# order by min() on columns of table "login_tokens"
input login_tokens_min_order_by {
  created_at: order_by
  hash: order_by
  id: order_by
  user: order_by
}

# response of any mutation on the table "login_tokens"
type login_tokens_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [login_tokens!]!
}

# input type for inserting object relation for remote table "login_tokens"
input login_tokens_obj_rel_insert_input {
  data: login_tokens_insert_input!
  on_conflict: login_tokens_on_conflict
}

# on conflict condition type for table "login_tokens"
input login_tokens_on_conflict {
  constraint: login_tokens_constraint!
  update_columns: [login_tokens_update_column!]!
  where: login_tokens_bool_exp
}

# ordering options when selecting data from "login_tokens"
input login_tokens_order_by {
  created_at: order_by
  hash: order_by
  id: order_by
  used: order_by
  user: order_by
}

# primary key columns input for table: "login_tokens"
input login_tokens_pk_columns_input {
  id: String!
}

# select columns of table "login_tokens"
enum login_tokens_select_column {
  # column name
  created_at

  # column name
  hash

  # column name
  id

  # column name
  used

  # column name
  user
}

# input type for updating data in table "login_tokens"
input login_tokens_set_input {
  created_at: timestamptz
  hash: String
  id: String
  used: Boolean
  user: String
}

# update columns of table "login_tokens"
enum login_tokens_update_column {
  # column name
  created_at

  # column name
  hash

  # column name
  id

  # column name
  used

  # column name
  user
}

# mutation root
type mutation_root {
  # delete data from the table: "login_tokens"
  delete_login_tokens(
    # filter the rows which have to be deleted
    where: login_tokens_bool_exp!
  ): login_tokens_mutation_response

  # delete single row from the table: "login_tokens"
  delete_login_tokens_by_pk(id: String!): login_tokens

  # delete data from the table: "signup_tokens"
  delete_signup_tokens(
    # filter the rows which have to be deleted
    where: signup_tokens_bool_exp!
  ): signup_tokens_mutation_response

  # delete single row from the table: "signup_tokens"
  delete_signup_tokens_by_pk(id: String!): signup_tokens

  # delete data from the table: "users"
  delete_users(
    # filter the rows which have to be deleted
    where: users_bool_exp!
  ): users_mutation_response

  # delete single row from the table: "users"
  delete_users_by_pk(id: String!): users

  # insert data into the table: "login_tokens"
  insert_login_tokens(
    # the rows to be inserted
    objects: [login_tokens_insert_input!]!

    # on conflict condition
    on_conflict: login_tokens_on_conflict
  ): login_tokens_mutation_response

  # insert a single row into the table: "login_tokens"
  insert_login_tokens_one(
    # the row to be inserted
    object: login_tokens_insert_input!

    # on conflict condition
    on_conflict: login_tokens_on_conflict
  ): login_tokens

  # insert data into the table: "signup_tokens"
  insert_signup_tokens(
    # the rows to be inserted
    objects: [signup_tokens_insert_input!]!

    # on conflict condition
    on_conflict: signup_tokens_on_conflict
  ): signup_tokens_mutation_response

  # insert a single row into the table: "signup_tokens"
  insert_signup_tokens_one(
    # the row to be inserted
    object: signup_tokens_insert_input!

    # on conflict condition
    on_conflict: signup_tokens_on_conflict
  ): signup_tokens

  # insert data into the table: "users"
  insert_users(
    # the rows to be inserted
    objects: [users_insert_input!]!

    # on conflict condition
    on_conflict: users_on_conflict
  ): users_mutation_response

  # insert a single row into the table: "users"
  insert_users_one(
    # the row to be inserted
    object: users_insert_input!

    # on conflict condition
    on_conflict: users_on_conflict
  ): users

  # update data of the table: "login_tokens"
  update_login_tokens(
    # sets the columns of the filtered rows to the given values
    _set: login_tokens_set_input

    # filter the rows which have to be updated
    where: login_tokens_bool_exp!
  ): login_tokens_mutation_response

  # update single row of the table: "login_tokens"
  update_login_tokens_by_pk(
    # sets the columns of the filtered rows to the given values
    _set: login_tokens_set_input
    pk_columns: login_tokens_pk_columns_input!
  ): login_tokens

  # update data of the table: "signup_tokens"
  update_signup_tokens(
    # sets the columns of the filtered rows to the given values
    _set: signup_tokens_set_input

    # filter the rows which have to be updated
    where: signup_tokens_bool_exp!
  ): signup_tokens_mutation_response

  # update single row of the table: "signup_tokens"
  update_signup_tokens_by_pk(
    # sets the columns of the filtered rows to the given values
    _set: signup_tokens_set_input
    pk_columns: signup_tokens_pk_columns_input!
  ): signup_tokens

  # update data of the table: "users"
  update_users(
    # sets the columns of the filtered rows to the given values
    _set: users_set_input

    # filter the rows which have to be updated
    where: users_bool_exp!
  ): users_mutation_response

  # update single row of the table: "users"
  update_users_by_pk(
    # sets the columns of the filtered rows to the given values
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users
}

# column ordering options
enum order_by {
  # in the ascending order, nulls last
  asc

  # in the ascending order, nulls first
  asc_nulls_first

  # in the ascending order, nulls last
  asc_nulls_last

  # in the descending order, nulls first
  desc

  # in the descending order, nulls first
  desc_nulls_first

  # in the descending order, nulls last
  desc_nulls_last
}

# query root
type query_root {
  # fetch data from the table: "login_tokens"
  login_tokens(
    # distinct select on columns
    distinct_on: [login_tokens_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [login_tokens_order_by!]

    # filter the rows returned
    where: login_tokens_bool_exp
  ): [login_tokens!]!

  # fetch aggregated fields from the table: "login_tokens"
  login_tokens_aggregate(
    # distinct select on columns
    distinct_on: [login_tokens_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [login_tokens_order_by!]

    # filter the rows returned
    where: login_tokens_bool_exp
  ): login_tokens_aggregate!

  # fetch data from the table: "login_tokens" using primary key columns
  login_tokens_by_pk(id: String!): login_tokens

  # fetch data from the table: "signup_tokens"
  signup_tokens(
    # distinct select on columns
    distinct_on: [signup_tokens_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [signup_tokens_order_by!]

    # filter the rows returned
    where: signup_tokens_bool_exp
  ): [signup_tokens!]!

  # fetch aggregated fields from the table: "signup_tokens"
  signup_tokens_aggregate(
    # distinct select on columns
    distinct_on: [signup_tokens_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [signup_tokens_order_by!]

    # filter the rows returned
    where: signup_tokens_bool_exp
  ): signup_tokens_aggregate!

  # fetch data from the table: "signup_tokens" using primary key columns
  signup_tokens_by_pk(id: String!): signup_tokens

  # fetch data from the table: "users"
  users(
    # distinct select on columns
    distinct_on: [users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [users_order_by!]

    # filter the rows returned
    where: users_bool_exp
  ): [users!]!

  # fetch aggregated fields from the table: "users"
  users_aggregate(
    # distinct select on columns
    distinct_on: [users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [users_order_by!]

    # filter the rows returned
    where: users_bool_exp
  ): users_aggregate!

  # fetch data from the table: "users" using primary key columns
  users_by_pk(id: String!): users
}

# columns and relationships of "signup_tokens"
type signup_tokens {
  created_at: timestamptz!
  email: String!
  hash: String!
  id: String!
}

# aggregated selection of "signup_tokens"
type signup_tokens_aggregate {
  aggregate: signup_tokens_aggregate_fields
  nodes: [signup_tokens!]!
}

# aggregate fields of "signup_tokens"
type signup_tokens_aggregate_fields {
  count(columns: [signup_tokens_select_column!], distinct: Boolean): Int
  max: signup_tokens_max_fields
  min: signup_tokens_min_fields
}

# order by aggregate values of table "signup_tokens"
input signup_tokens_aggregate_order_by {
  count: order_by
  max: signup_tokens_max_order_by
  min: signup_tokens_min_order_by
}

# input type for inserting array relation for remote table "signup_tokens"
input signup_tokens_arr_rel_insert_input {
  data: [signup_tokens_insert_input!]!
  on_conflict: signup_tokens_on_conflict
}

# Boolean expression to filter rows from the table "signup_tokens". All fields are combined with a logical 'AND'.
input signup_tokens_bool_exp {
  _and: [signup_tokens_bool_exp]
  _not: signup_tokens_bool_exp
  _or: [signup_tokens_bool_exp]
  created_at: timestamptz_comparison_exp
  email: String_comparison_exp
  hash: String_comparison_exp
  id: String_comparison_exp
}

# unique or primary key constraints on table "signup_tokens"
enum signup_tokens_constraint {
  # unique or primary key constraint
  signup_tokens_pkey
}

# input type for inserting data into table "signup_tokens"
input signup_tokens_insert_input {
  created_at: timestamptz
  email: String
  hash: String
  id: String
}

# aggregate max on columns
type signup_tokens_max_fields {
  created_at: timestamptz
  email: String
  hash: String
  id: String
}

# order by max() on columns of table "signup_tokens"
input signup_tokens_max_order_by {
  created_at: order_by
  email: order_by
  hash: order_by
  id: order_by
}

# aggregate min on columns
type signup_tokens_min_fields {
  created_at: timestamptz
  email: String
  hash: String
  id: String
}

# order by min() on columns of table "signup_tokens"
input signup_tokens_min_order_by {
  created_at: order_by
  email: order_by
  hash: order_by
  id: order_by
}

# response of any mutation on the table "signup_tokens"
type signup_tokens_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [signup_tokens!]!
}

# input type for inserting object relation for remote table "signup_tokens"
input signup_tokens_obj_rel_insert_input {
  data: signup_tokens_insert_input!
  on_conflict: signup_tokens_on_conflict
}

# on conflict condition type for table "signup_tokens"
input signup_tokens_on_conflict {
  constraint: signup_tokens_constraint!
  update_columns: [signup_tokens_update_column!]!
  where: signup_tokens_bool_exp
}

# ordering options when selecting data from "signup_tokens"
input signup_tokens_order_by {
  created_at: order_by
  email: order_by
  hash: order_by
  id: order_by
}

# primary key columns input for table: "signup_tokens"
input signup_tokens_pk_columns_input {
  id: String!
}

# select columns of table "signup_tokens"
enum signup_tokens_select_column {
  # column name
  created_at

  # column name
  email

  # column name
  hash

  # column name
  id
}

# input type for updating data in table "signup_tokens"
input signup_tokens_set_input {
  created_at: timestamptz
  email: String
  hash: String
  id: String
}

# update columns of table "signup_tokens"
enum signup_tokens_update_column {
  # column name
  created_at

  # column name
  email

  # column name
  hash

  # column name
  id
}

# expression to compare columns of type String. All fields are combined with logical 'AND'.
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

# subscription root
type subscription_root {
  # fetch data from the table: "login_tokens"
  login_tokens(
    # distinct select on columns
    distinct_on: [login_tokens_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [login_tokens_order_by!]

    # filter the rows returned
    where: login_tokens_bool_exp
  ): [login_tokens!]!

  # fetch aggregated fields from the table: "login_tokens"
  login_tokens_aggregate(
    # distinct select on columns
    distinct_on: [login_tokens_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [login_tokens_order_by!]

    # filter the rows returned
    where: login_tokens_bool_exp
  ): login_tokens_aggregate!

  # fetch data from the table: "login_tokens" using primary key columns
  login_tokens_by_pk(id: String!): login_tokens

  # fetch data from the table: "signup_tokens"
  signup_tokens(
    # distinct select on columns
    distinct_on: [signup_tokens_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [signup_tokens_order_by!]

    # filter the rows returned
    where: signup_tokens_bool_exp
  ): [signup_tokens!]!

  # fetch aggregated fields from the table: "signup_tokens"
  signup_tokens_aggregate(
    # distinct select on columns
    distinct_on: [signup_tokens_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [signup_tokens_order_by!]

    # filter the rows returned
    where: signup_tokens_bool_exp
  ): signup_tokens_aggregate!

  # fetch data from the table: "signup_tokens" using primary key columns
  signup_tokens_by_pk(id: String!): signup_tokens

  # fetch data from the table: "users"
  users(
    # distinct select on columns
    distinct_on: [users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [users_order_by!]

    # filter the rows returned
    where: users_bool_exp
  ): [users!]!

  # fetch aggregated fields from the table: "users"
  users_aggregate(
    # distinct select on columns
    distinct_on: [users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [users_order_by!]

    # filter the rows returned
    where: users_bool_exp
  ): users_aggregate!

  # fetch data from the table: "users" using primary key columns
  users_by_pk(id: String!): users
}

scalar timestamptz

# expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

# columns and relationships of "users"
type users {
  created_at: timestamptz!
  email: String!
  id: String!
  updated_at: timestamptz!
}

# aggregated selection of "users"
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

# aggregate fields of "users"
type users_aggregate_fields {
  count(columns: [users_select_column!], distinct: Boolean): Int
  max: users_max_fields
  min: users_min_fields
}

# order by aggregate values of table "users"
input users_aggregate_order_by {
  count: order_by
  max: users_max_order_by
  min: users_min_order_by
}

# input type for inserting array relation for remote table "users"
input users_arr_rel_insert_input {
  data: [users_insert_input!]!
  on_conflict: users_on_conflict
}

# Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
input users_bool_exp {
  _and: [users_bool_exp]
  _not: users_bool_exp
  _or: [users_bool_exp]
  created_at: timestamptz_comparison_exp
  email: String_comparison_exp
  id: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

# unique or primary key constraints on table "users"
enum users_constraint {
  # unique or primary key constraint
  users2_email_key

  # unique or primary key constraint
  users2_pkey
}

# input type for inserting data into table "users"
input users_insert_input {
  created_at: timestamptz
  email: String
  id: String
  updated_at: timestamptz
}

# aggregate max on columns
type users_max_fields {
  created_at: timestamptz
  email: String
  id: String
  updated_at: timestamptz
}

# order by max() on columns of table "users"
input users_max_order_by {
  created_at: order_by
  email: order_by
  id: order_by
  updated_at: order_by
}

# aggregate min on columns
type users_min_fields {
  created_at: timestamptz
  email: String
  id: String
  updated_at: timestamptz
}

# order by min() on columns of table "users"
input users_min_order_by {
  created_at: order_by
  email: order_by
  id: order_by
  updated_at: order_by
}

# response of any mutation on the table "users"
type users_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [users!]!
}

# input type for inserting object relation for remote table "users"
input users_obj_rel_insert_input {
  data: users_insert_input!
  on_conflict: users_on_conflict
}

# on conflict condition type for table "users"
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]!
  where: users_bool_exp
}

# ordering options when selecting data from "users"
input users_order_by {
  created_at: order_by
  email: order_by
  id: order_by
  updated_at: order_by
}

# primary key columns input for table: "users"
input users_pk_columns_input {
  id: String!
}

# select columns of table "users"
enum users_select_column {
  # column name
  created_at

  # column name
  email

  # column name
  id

  # column name
  updated_at
}

# input type for updating data in table "users"
input users_set_input {
  created_at: timestamptz
  email: String
  id: String
  updated_at: timestamptz
}

# update columns of table "users"
enum users_update_column {
  # column name
  created_at

  # column name
  email

  # column name
  id

  # column name
  updated_at
}

